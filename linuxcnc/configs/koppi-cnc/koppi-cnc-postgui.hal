######################################################################
#
# postgui HAL file for koppi's CNC
#
# Created 2015/05/14 by Jakob Flierl <jakob.flierl@gmail.com>
#
# This file connects hardware E-Stop button and software E-Stop button
# as well as the EtherCAT bus link status to the classicladder.
#
# See: file "koppi-cnc-estop.clp" for more details.
#

######################################################################
# E-Stop Inputs
######################################################################

# link EtherCAT link up signal to classicladder input pin 0
linkps classicladder.0.in-00 => ec-link-up

# link estop-hw-button signal  to classicladder input pin 1
linkps classicladder.0.in-01 => estop-hw-button

# link software E-Stop button  to classicladder input pin 2
net emc-estop iocontrol.0.user-enable-out => classicladder.0.in-02

######################################################################
# E-Stop Output
######################################################################

# Request E-Stop Enable from EMC
net estop-all-ok iocontrol.0.emc-enable-in <= classicladder.0.out-00

######################################################################
# Probe Pin Inputs
######################################################################

# link probe-pin-in signal to motion.probe-input pin

# G38.x uses the value on this pin to determine when the probe has
# made contact: TRUE  for probe contact closed (touching),
#               FALSE for probe contact open.

linksp probe-pin-in => motion.probe-input

# link probe-pin-in signal to pyvcp ui element
linksp probe-pin-in => pyvcp.probe-status

######################################################################
# HALUI MDI Commands
######################################################################

net remote-rapid-to-home halui.mdi-command-00 <= pyvcp.rapid-to-home
net touchoff-probe-x     halui.mdi-command-01 <= pyvcp.touchoff-probe-x
net touchoff-probe-y     halui.mdi-command-02 <= pyvcp.touchoff-probe-y
net touchoff-probe-z     halui.mdi-command-03 <= pyvcp.touchoff-probe-z
net probe-corner         halui.mdi-command-04 <= pyvcp.probe-corner
net touchoff-mat-xyz-0   halui.mdi-command-05 <= pyvcp.touchoff-xyz-0

######################################################################
# Start with estop disabled
######################################################################

setp halui.estop.reset 1
setp halui.estop.reset 0

######################################################################
# Jogging with Joypad
######################################################################

setp halui.jog-speed 900

net joy-x-jog halui.jog.0.analog <= input.0.abs-x-position
net joy-y-jog halui.jog.1.analog <= input.0.abs-y-position
net joy-z-jog halui.jog.2.analog <= input.0.abs-rz-position

# I needed to reverse the direction of Y and Z axes.
setp input.0.abs-y-scale -127.5
setp input.0.abs-rz-scale -127.5

# TODO http://www.microcopters.de/artikel/emc2-game-controller-zur-manuellen-cnc-steuerung

######################################################################
# Add compensation to Z axis to eliminate surface inflattness
#
# See https://github.com/cnc-club/linuxcnc-engraving-comp
#
######################################################################
loadrt or2 count=2
loadrt sum2 count=1

loadusr -Wn compensation python koppi-cnc-engraving-comp.py koppi-cnc-engraving-comp.txt

addf or2.0 servo-thread
addf or2.1 servo-thread
addf sum2.0 servo-thread

net xpos-cmd => compensation.x-map
net ypos-cmd => compensation.y-map

unlinkp z-pid.command
unlinkp axis.2.motor-pos-cmd
unlinkp axis.2.motor-pos-fb

net zpos-cmd <= axis.2.motor-pos-cmd
net zpos-cmd => axis.2.motor-pos-fb

net zpos-cmd => sum2.0.in0
net comp compensation.out => sum2.0.in1
net zpos-cmd-comp sum2.0.out => z-pid.command

net dout-00 <= motion.digital-out-00
net dout-00 => or2.0.in0
net comp-enable or2.0.out compensation.enable

loadrt toggle count=1
addf toggle.0 servo-thread
net pyvcp-enable  toggle.0.in  <= pyvcp.enable
net toggle-enable toggle.0.out => or2.0.in1

net dout-01 <= motion.digital-out-01
net dout-01 => or2.1.in0
net pyvcp-reset pyvcp.reset => or2.1.in1
net comp-reset or2.1.out compensation.reset

net comp-enable => pyvcp.enable-led
net comp-reset => pyvcp.reset-led
net comp-error compensation.error => pyvcp.error-led

#net zpos-cmd-comp => pyvcp.current-z
net comp => pyvcp.current-comp
